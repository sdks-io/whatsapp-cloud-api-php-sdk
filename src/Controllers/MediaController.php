<?php

declare(strict_types=1);

/*
 * WhatsAppCloudAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace WhatsAppCloudAPILib\Controllers;

use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\TemplateParam;
use CoreInterfaces\Core\Request\RequestMethod;
use WhatsAppCloudAPILib\Exceptions\ApiException;
use WhatsAppCloudAPILib\Models\RetrieveMediaURLResponse;
use WhatsAppCloudAPILib\Models\SuccessResponse;
use WhatsAppCloudAPILib\Models\UploadMedia;

class MediaController extends BaseController
{
    /**
     * Used to upload media. All media files sent through this endpoint are encrypted and persist for 30
     * days.
     *
     * @param string $phoneNumberID
     * @param string $messagingProduct Messaging service used for the request. In this case, use
     *        whatsapp.
     * @param string $file Path to the file stored in your local directory. For example:
     *        "@/local/path/file.jpg".
     * @param string $type Type of media file being uploaded. See Supported Media Types for more
     *        information.
     *
     *        Supported options for images are: `image/jpeg`, `image/png`
     *
     *        Supported options for documents are: `text/plain`, `application/pdf`,
     *        `application/vnd.ms-powerpoint`, `application/msword`, `application/vnd.ms-excel`,
     *        `application/vnd.openxmlformats-officedocument.wordprocessingml.document`,
     *        `application/vnd.openxmlformats-officedocument.presentationml.presentation`,
     *        `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`
     *
     *        Supported options for audio are: `audio/aac`, `audio/mp4`, `audio/mpeg`, `audio/amr`,
     *        `audio/ogg`, `audio/opus`
     *
     *        Supported options for video are: `video/mp4`, `video/3gp`
     *
     *        Supported options for stickers are: `image/webp`
     *
     * @return UploadMedia Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function uploadMedia(
        string $phoneNumberID,
        string $messagingProduct,
        string $file,
        string $type
    ): UploadMedia {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/{Phone-Number-ID}/media')
            ->auth('global')
            ->parameters(
                TemplateParam::init('Phone-Number-ID', $phoneNumberID),
                FormParam::init('messaging_product', $messagingProduct),
                FormParam::init('file', $file),
                FormParam::init('type', $type)
            );

        $_resHandler = $this->responseHandler()->type(UploadMedia::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * To retrieve your mediaâ€™s URL, make a request to this endpoint. Later, you can use this URL to
     * download the media file.
     *
     * @param string $mediaID Media object ID from either uploading media endpoint or media message
     *        Webhooks
     *
     * @return RetrieveMediaURLResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function retrieveMediaURL(string $mediaID): RetrieveMediaURLResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/{Media-ID}')
            ->auth('global')
            ->parameters(TemplateParam::init('Media-ID', $mediaID));

        $_resHandler = $this->responseHandler()->type(RetrieveMediaURLResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint can be used for deleting a media object.
     *
     * @param string $mediaID Media object ID from either uploading media endpoint or media message
     *        Webhooks
     *
     * @return SuccessResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteMedia(string $mediaID): SuccessResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/{Media-ID}')
            ->auth('global')
            ->parameters(TemplateParam::init('Media-ID', $mediaID));

        $_resHandler = $this->responseHandler()->type(SuccessResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}

<?php

declare(strict_types=1);

/*
 * WhatsAppCloudAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace WhatsAppCloudAPILib\Controllers;

use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\TemplateParam;
use CoreInterfaces\Core\Request\RequestMethod;
use WhatsAppCloudAPILib\Exceptions\ApiException;
use WhatsAppCloudAPILib\Models\GetPhoneNumberByIDResponse;
use WhatsAppCloudAPILib\Models\RequestVerificationCodeMethodEnum;
use WhatsAppCloudAPILib\Models\SuccessResponse;

class PhoneNumbersController extends BaseController
{
    /**
     * When you query all the phone numbers for a WhatsApp Business Account, each phone number has an id.
     * You can directly query for a phone number using this id.
     *
     * @param string $phoneNumberID
     *
     * @return GetPhoneNumberByIDResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getPhoneNumberByID(string $phoneNumberID): GetPhoneNumberByIDResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/{Phone-Number-ID}')
            ->auth('global')
            ->parameters(TemplateParam::init('Phone-Number-ID', $phoneNumberID));

        $_resHandler = $this->responseHandler()->type(GetPhoneNumberByIDResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Used to request a code to verify a phone number's ownership. You need to verify the phone number you
     * want to use to send messages to your customers. Phone numbers must be verified through SMS/voice
     * call. The verification process can be done through the Graph API calls specified below.
     *
     * @param string $phoneNumberID
     * @param string $codeMethod Chosen method for verification.
     * @param string $locale Your locale. For example: "en_US".
     *
     * @return SuccessResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function requestVerificationCode(string $phoneNumberID, string $codeMethod, string $locale): SuccessResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/{Phone-Number-ID}/request_code')
            ->auth('global')
            ->parameters(
                TemplateParam::init('Phone-Number-ID', $phoneNumberID),
                FormParam::init('code_method', $codeMethod)
                    ->serializeBy([RequestVerificationCodeMethodEnum::class, 'checkValue']),
                FormParam::init('locale', $locale)
            );

        $_resHandler = $this->responseHandler()->type(SuccessResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Used to verify a phone number's ownership. After you have received a SMS or Voice request code for
     * verification, you need to verify the code that was sent to you.
     *
     * @param string $phoneNumberID
     * @param string $code The code you received after calling FROM_PHONE_NUMBER_ID/request_code.
     *
     * @return SuccessResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function verifyCode(string $phoneNumberID, string $code): SuccessResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/{Phone-Number-ID}/verify_code')
            ->auth('global')
            ->parameters(TemplateParam::init('Phone-Number-ID', $phoneNumberID), FormParam::init('code', $code));

        $_resHandler = $this->responseHandler()->type(SuccessResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
